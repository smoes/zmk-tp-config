#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Modified keymap based on personal experience, with some improvements based on Miryoku layout.

#define DEFAULT 0
#define SYMBOL  1
#define NUM     2
#define MOUSE   3
#define NAV     4

/*
 * Defines to enable/disable features
 *
 * These defines allow us to conditionally enable and disable parts of the keymap config.
 *
 * For example, if we decide to build the firmware without the mouse features, we can
 * disable all the config options that rely on those forks and modules without having
 * to edit the entire keymap file manually every time.
 */

#define HAS_MOUSE_KEYS
#define HAS_MOUSE_TP

#ifdef HAS_MOUSE_KEYS
  #include <dt-bindings/zmk/mouse.h>
  #include <behaviors/mouse_keys.dtsi>
#endif  // HAS_MOUSE_KEYS

#ifdef HAS_MOUSE_TP
  // We store the trackpoint settings in a separate file
  // to make organization a little easier.
  #include "include/mouse_tp.dtsi"
#endif  // HAS_MOUSE_TP



// Adjust layer keys based on enabled features.
//
// This prevents build errors when we build the firmware
// without the mouse keys PR or the TP module.
#ifdef HAS_MOUSE_KEYS
  #define U_THUMB_INNER &mo MOUSE_KEYS
#else
  #define U_THUMB_INNER &none
#endif  // HAS_MOUSE_KEYS

#ifdef HAS_MOUSE_TP
  #define U_TOG_TP_SET &tog MOUSE_TP_SET
#else
  #define U_TOG_TP_SET &none
#endif  // HAS_MOUSE_TP




/ {
    behaviors {
        hml: homerow_mods_left {
             compatible = "zmk,behavior-hold-tap";
             flavor = "balanced";
             tapping-term-ms = <280>;
             #binding-cells = <2>;
             quick-tap-ms = <175>;                // repeat on tap-into-hold
             require-prior-idle-ms = <0>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
             hold-trigger-on-release;             // delay positional check until key-release
        };
        hmr: homerow_mods_right {
             compatible = "zmk,behavior-hold-tap";
             flavor = "balanced";
             tapping-term-ms = <280>;
             #binding-cells = <2>;
             quick-tap-ms = <175>;                // repeat on tap-into-hold
             require-prior-idle-ms = <0>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
             hold-trigger-on-release;             // delay positional check until key-release
        };
        hold: hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
    };
    macros {
      symbol: symbol {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl SYMBOL>, <&to SYMBOL>;
       };
       hmld: hmld {
          compatible = "zmk,behavior-macro-two-param";
          wait-ms = <0>;
          tap-ms = <0>;
          #binding-cells = <2>;
          bindings
              = <&macro_press &to DEFAULT>
              , <&macro_param_1to1>
              , <&macro_param_2to2>
              , <&macro_press &hml MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
              , <&macro_pause_for_release>
              , <&macro_param_1to1>
              , <&macro_param_2to2>
              , <&macro_release &hml MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
              ;
       };
       hmrd: hmrd {
          compatible = "zmk,behavior-macro-two-param";
          wait-ms = <0>;
          tap-ms = <0>;
          #binding-cells = <2>;
          bindings
              = <&macro_press &to DEFAULT>
              , <&macro_param_1to1>
              , <&macro_param_2to2>
              , <&macro_press &hmr MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
              , <&macro_pause_for_release>
              , <&macro_param_1to1>
              , <&macro_param_2to2>
              , <&macro_release &hmr MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
              ;
       };
       def: def {
          compatible = "zmk,behavior-macro-one-param";
          wait-ms = <0>;
          tap-ms = <0>;
          #binding-cells = <1>;
          bindings
              = <&macro_param_1to1>
              , <&macro_tap &kp MACRO_PLACEHOLDER>
              , <&macro_tap &to DEFAULT>
              ;
       };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
    &kp  Q      &kp  W       &kp  E       &kp  R           &kp T           &kp Y       &kp  U       &kp  I       &kp  O       &kp P
    &hml LGUI A &hml LALT S  &hml LCTRL D &hml LSHFT F     &kp G           &kp H       &hmr LSHFT J &hmr LCTRL K &hmr LALT L  &hmr LGUI SEMI 
    &kp  Z      &kp  X       &kp C        &kp  V           &kp B           &kp N       &kp  M       &kp  COMMA   &kp  DOT     &kp FSLH
                             &kp ESC      &lt NAV SPACE    &kp TAB        &kp BSPC     &kp  RET     &symbol
            >;
        };

        symbol {
            bindings = <
    &none         &none     &kp GRAVE    &kp PRCNT      &kp HASH        &kp AMPS    &kp  LBKT    &kp  RBKT    &kp CARET    &kp SQT
    &kp EXCL      &kp AT    &kp EQUAL    &kp MINUS      &kp UNDER       &kp LT      &kp  LPAR    &kp  RPAR    &kp PIPE     &kp GT       
    &none         &kp BSLH  &kp PLUS     &kp STAR       &kp TILDE       &kp EXCL    &kp  LBRC    &kp  RBRC    &kp DLLR     &kp DQT
                            &def ESC     &def SPACE     &to NUM         &trans      &trans       &to  DEFAULT 
            >;
        };

        num {
            bindings = <
    &kp N1     &def W        &kp  N4        &def R           &def T           &def Y        &def U           &kp  N8          &kp  N9        &def P
    &kp N2     &kp N3        &hmld LCTRL D  &hmld LSHIFT F   &def G           &def H        &hmrd LSHIFT J   &hmrd LCTRL K    &hmrd LALT L   &kp N0       
    &def Z     &def X        &def C         &kp  N5          &def B           &kp  N6       &kp  N7          &kp  COMMA       &kp DOT        &def FSLH
                             &def ESC       &def SPACE       &trans           &trans        &def RET         &to DEFAULT 
            >;
        };

        mouse {
            bindings = <
    &def  Q        &def  W         &def  E         &def R            &def T           &def Y         &def  U           &def  I          &def  O       &def P
    &hmld LGUI A   &hmld LALT S    &hmld LCTRL D   &hmld LSHIFT F    &def G           &def H         &hmrd LSHIFT J    &hmrd LALT K     &hmrd LALT L  &hmrd LGUI SQT
    &def  Z        &def  X         &def  C         &def V            &def B           &def N         &def  M           &def  COMMA      &def  DOT     &def FSLH
                                   &to DEFAULT     &lt NAV SPACE     &trans           &mkp MCLK      &mkp LCLK         &mkp RCLK 
            >;
        };

        nav {
            bindings = <
    U_MSS_TP_S_I  U_MSS_TP_V6_I  U_MSS_TP_NI_I        &kp  R           &kp T           &kp Y       &msc  SCRL_UP      &kp  I       &kp  O       &kp P
    U_MSS_TP_S_D  U_MSS_TP_V6_D  U_MSS_TP_NI_D        &kp F            &kp G           &kp LEFT    &kp   DOWN         &kp  UP      &kp  RIGHT   &hmr LGUI SQT
    U_MSS_RESET   &kp  X         &kp C                &kp  V           &kp B           &kp N       &msc  SCRL_DOWN    &kp  COMMA   &kp  DOT     &kp FSLH
                                 &to DEFAULT          &trans           &trans          &mkp MB4    &mkp  MB5          &to DEFAULT
            >;
        };
    };
};
