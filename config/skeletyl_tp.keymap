#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Modified keymap based on personal experience, with some improvements based on Miryoku layout.

#define QWERTY  0
#define COLDH   1
#define NAV     2
#define NUM     3
#define PRGRM   4
#define FUN     5
#define ILLUST  6
#define GAME    7

#define MOUSE_KEYS 2
#define MOUSE_TP 3
#define MOUSE_TP_SET 4

/*
 * Defines to enable/disable features
 *
 * These defines allow us to conditionally enable and disable parts of the keymap config.
 *
 * For example, if we decide to build the firmware without the mouse features, we can
 * disable all the config options that rely on those forks and modules without having
 * to edit the entire keymap file manually every time.
 */

#define HAS_MOUSE_KEYS
#define HAS_MOUSE_TP

#ifdef HAS_MOUSE_KEYS
  #include <dt-bindings/zmk/mouse.h>
  #include <behaviors/mouse_keys.dtsi>
#endif  // HAS_MOUSE_KEYS

#ifdef HAS_MOUSE_TP
  // We store the trackpoint settings in a separate file
  // to make organization a little easier.
  #include "include/mouse_tp.dtsi"
#endif  // HAS_MOUSE_TP



// Adjust layer keys based on enabled features.
//
// This prevents build errors when we build the firmware
// without the mouse keys PR or the TP module.
#ifdef HAS_MOUSE_KEYS
  #define U_THUMB_INNER &mo MOUSE_KEYS
#else
  #define U_THUMB_INNER &none
#endif  // HAS_MOUSE_KEYS

#ifdef HAS_MOUSE_TP
  #define U_TOG_TP_SET &tog MOUSE_TP_SET
#else
  #define U_TOG_TP_SET &none
#endif  // HAS_MOUSE_TP









#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hml: homerow_mods_left {
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;                // repeat on tap-into-hold
             require-prior-idle-ms = <150>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
             hold-trigger-on-release;             // delay positional check until key-release
        };
        hmr: homerow_mods_right {
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;                // repeat on tap-into-hold
             require-prior-idle-ms = <150>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
             hold-trigger-on-release;             // delay positional check until key-release
        };
    };

    combos {
        compatible = "zmk,combos";

        // Combos for media player.
        // I often switch songs while drawing, so I assign the
        // combos on left hand side.

        combo_med_next {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp C_NEXT>;
        };
        combo_med_prev {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp C_PREV>;
        };
        combo_med_pp {
            timeout-ms = <50>;
            key-positions = <1 4>;
            bindings = <&kp C_PP>;
        };
        combo_med_stop {
            timeout-ms = <50>;
            key-positions = <1 3>;
            bindings = <&kp C_STOP>;
        };
        combo_med_vol_up {
            timeout-ms = <50>;
            key-positions = <2 13>;
            bindings = <&kp C_VOL_UP>;
        };
        combo_med_vol_dn {
            timeout-ms = <50>;
            key-positions = <3 12>;
            bindings = <&kp C_VOL_DN>;
        };
        combo_med_mute {
            timeout-ms = <50>;
            key-positions = <12 14>;
            bindings = <&kp C_MUTE>;
        };

        // combo for toggling illust layer
        combo_tg_illust {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            bindings = <&tog ILLUST>;
        };

        // Combo for toggling the Colemak layout
        combo_tg_colemak {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&tog COLDH>;
        };

        // Combo for toggling minimal game layout
        combo_tg_game {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&tog GAME>;
        };

        // Combo for bluetooth control
        // (i.e. switch among the devices).
        combo_bt_next {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&bt BT_NXT>;
        };
        combo_bt_prev {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&bt BT_PRV>;
        };
        combo_bt_clr {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&bt BT_CLR>;
        };
        combo_bt_out_tog {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&out OUT_TOG>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
    &kp  Q      &kp  W       &kp  E       &kp  R           &kp T           &kp Y       &kp  U       &kp  I       &kp  O       &kp P
    &hml LGUI A &hml LALT S  &hml LCTRL D &hml LSHFT F     &kp G           &kp H       &hmr LSHFT J &hmr LCTRL K &hmr LALT L  &hmr LGUI SQT
    &kp  Z      &hm  RALT X  &kp C        &kp  V           &kp B           &kp N       &kp  M       &kp  COMMA   &kp  DOT     &kp FSLH
                             &kp DEL      &kp SPACE        &lt PRGRM TAB   &kp BSPC    &lt  NAV RET &lt FUN ESC
            >;
        };

        colemak_dh {
            bindings = <
    &kp Q       &kp W       &kp F       &kp P           &kp B           &kp J       &kp L       &kp U       &kp Y           &kp SQT
    &hmp LGUI A &hm LALT R  &hm LCTRL S &hm LSHFT T     &kp G           &kp M       &hm LSHFT N &hm LCTRL E &hm LALT I      &hmp LGUI O
    &kp Z       &hm RALT X  &kp C       &kp D           &kp V           &kp K       &kp H       &kp COMMA   &hm RALT DOT    &kp FSLH
                            &kp DEL     &lt NUM SPACE   &lt PRGRM TAB     &kp BSPC    &lt NAV RET &lt FUN ESC
            >;
        };

        nav_layer {
            bindings = <
    &kp HOME    &kp PG_UP       &kp UP      &kp PG_DN       &kp CAPS    &none       &none       &none       &none       &none
    &kp END     &kp LEFT        &kp DOWN    &kp RIGHT       &kp INS     &none       &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI
    &kp LC(Z)   &kp LC(LEFT)    &none       &kp LC(RIGHT)   &kp LC(Y)   &none       &none       &none       &none       &none
                                &kp LC(X)   &kp LC(C)       &kp LC(V)   &none       &none       &none     
            >;
        };

        num_layer {
            bindings = <
    &none       &none       &none       &none       &none       AS(LBKT)        AS(N7)      AS(N8)      AS(N9)  AS(RBKT)
    &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none       AS(EQUAL)       AS(N4)      AS(N5)      AS(N6)  AS(SEMI)
    &none       &none       &none       &none       &none       AS(GRAVE)       AS(N1)      AS(N2)      AS(N3)  AS(BSLH)
                            &none       &trans      &none       &as LPAR DOT    &as RPAR N0 AS(MINUS)
            >;
        };

       prgrm_layer {
           bindings = <
    &none       &none       &none       &none       &none       &none   &none       &none       &none   &none
    &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none       &none   AS(LBKT)    AS(RBKT)    &none   AS(SEMI)
    &none       &none       &none       &none       &none       &none   &kp EXCL    &kp EQUAL   &none   &kp FSLH
                            &trans      &none       &none       &kp LPAR    &kp RPAR    &kp UNDER
            >;
        };

        fun_layer {
            bindings = <
    &kp F12 &kp F7  &kp F8      &kp F9      &kp PSCRN       &none   &none       &none       &none       &none
    &kp F11 &kp F4  &kp F5      &kp F6      &kp SLCK        &none   &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI
    &kp F10 &kp F1  &kp F2      &kp F3      &kp PAUSE_BREAK &none   &none       &none       &none       &none
                    &kp K_APP   &kp SPACE   &kp TAB         &none   &none       &trans
            >;
        };

        illust_fun_layer {
            bindings = <
    &kp F12 &kp F7  &kp F8          &kp F9          &kp LBKT        &none   &none   &none   &none   &none
    &kp F11 &kp F4  &kp F5          &kp F6          &kp RBKT        &none   &none   &none   &none   &none
    &kp F10 &kp F1  &kp F2          &kp F3          &kp BSLH        &none   &none   &none   &none   &none
                    &sk LC(LSHFT)   &mt LSHFT LC(Z) &mt LCTRL LC(Y) &none   &none   &none
            >;
        };

        game_layer {
            bindings = <
    &kp F12 &kp Q  &kp W  &kp E  &kp R              &kp LGUI   &kp U   &kp I   &kp O   &kp LCTRL
    &kp F1 &kp A  &kp S  &kp D  &kp F              &kp LALT   &kp J   &kp K   &kp L   &kp LSHFT
    &none &kp Z  &kp X  &kp C  &kp V                 &none   &kp LEFT   &kp UP   &kp DOWN   &kp RIGHT
                    &kp DEL &kp SPACE &kp TAB   &kp BSPC   &kp RET   &kp ESC
            >;
        };

    };
};
